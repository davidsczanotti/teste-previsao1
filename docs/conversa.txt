# tactiq.io free youtube transcript
# Predict The Stock Market With Machine Learning And Python
# https://www.youtube.com/watch/1O_BenficgE

00:00:00.320 hi my name is vic and today we're going
00:00:03.280 to be predicting the stock market using
00:00:06.080 machine learning we'll start out by
00:00:08.160 downloading data on the s p 500 index
00:00:12.000 then we'll clean the data up and use it
00:00:14.000 to train a model then we'll do back
00:00:16.239 testing to actually figure out how good
00:00:18.240 our model is and we'll add in some more
00:00:21.119 predictors to improve our accuracy we'll
00:00:23.920 end with some next steps that you can
00:00:25.599 use to continue improving the model on
00:00:27.760 your own it's going to be a really fun
00:00:30.160 and exciting project before i started
00:00:32.800 dataquest i actually spent a lot of time
00:00:35.440 predicting the stock market both winning
00:00:37.600 machine learning competitions and
00:00:39.840 developing and selling algorithms there
00:00:42.480 are a lot of real world considerations
00:00:44.719 when you're predicting the stock market
00:00:46.480 that not all tutorials will show you so
00:00:48.960 i'm going to show you those today so you
00:00:50.719 can build a higher quality project let's
00:00:53.680 dive in
00:00:55.680 [Music]
00:00:59.280 by the end of this project we will have
00:01:01.600 created a machine learning model that
00:01:03.760 can predict tomorrow's s p 500 index
00:01:07.040 price given historical data we'll also
00:01:10.080 have back tested this model on 20 plus
00:01:13.040 years of historical data so we can
00:01:15.119 really be confident in the predictions
00:01:16.960 that it's making
00:01:18.640 okay let's go ahead and get started
00:01:21.040 we're going to be using jupiter lab for
00:01:23.119 this project you can also use jupiter
00:01:25.280 notebook if you have it installed
00:01:27.820 [Music]
00:01:31.920 and the first thing we'll do is we'll
00:01:33.439 import something called the y finance
00:01:35.759 package
00:01:37.119 this package calls the yahoo finance api
00:01:40.240 to download daily stock and index prices
00:01:44.479 and the first thing we'll do is we'll
00:01:47.040 initialize something called a ticker
00:01:49.040 class which will enable us to download
00:01:51.520 price history for a single symbol
00:01:54.640 in this case we will use the gspc symbol
00:01:57.600 which is the s p 500 index
00:02:00.560 so we'll go ahead and run that and then
00:02:02.479 the next thing we'll do
00:02:03.920 is we'll go ahead and query the
00:02:05.920 historical prices so we'll use the
00:02:08.800 history method
00:02:10.399 and we'll pass in period equals max
00:02:13.440 which will query all data from the very
00:02:15.920 beginning when the index was created
00:02:18.800 so let's run that
00:02:20.400 and we actually end up with a panda's
00:02:22.480 data frame
00:02:24.080 which is very very nice and in this data
00:02:26.720 frame each row
00:02:28.400 is the price on a single trading day so
00:02:31.680 non-trading days are not included in
00:02:33.519 this data
00:02:35.840 the columns are the opening price so the
00:02:38.319 price when the market opened the highest
00:02:40.720 price during the day the lowest price
00:02:42.959 during the day
00:02:44.080 the closing price when the when the
00:02:46.400 exchange closed and the volume so the
00:02:49.200 total volume that was traded that day
00:02:52.080 so we're essentially going to use these
00:02:54.080 columns to predict if the stock price
00:02:56.400 will go up or down tomorrow
00:02:59.760 we also have these additional columns
00:03:01.760 dividends and stock splits but we're not
00:03:04.159 going to use these and we'll actually
00:03:05.440 remove them later
00:03:08.400 all right so we'll take a look at the
00:03:11.040 index of the s p 500 data frame and we
00:03:14.720 can see we have a date time index
00:03:17.200 and the index is the this column on the
00:03:20.159 left if you're not familiar with it
00:03:23.200 and that column will enable us later on
00:03:26.159 to really index and slice the data frame
00:03:28.480 easily
00:03:29.870 [Music]
00:03:33.920 all right so the first thing we'll do is
00:03:35.680 we'll go ahead and plot
00:03:37.920 the data in the data frame so we'll plot
00:03:40.239 the closing price against the index
00:03:44.799 so what this is doing is it's saying
00:03:47.200 show the index which is really the the
00:03:49.120 trading days the dates on the x-axis and
00:03:51.920 show the closing price on the y-axis so
00:03:54.560 we can run that and we get a nice chart
00:03:57.040 of the s p 500 price history and we
00:04:00.239 really can regret not buying
00:04:03.120 the index fund at any point in the last
00:04:05.360 few years
00:04:07.439 all right we'll do a slight bit of data
00:04:09.360 cleaning here we'll just remove those
00:04:10.879 extra columns that we don't need so
00:04:13.200 we'll go ahead and remove the dividends
00:04:15.040 column and we'll also remove the stock
00:04:17.918 splits column
00:04:21.440 these columns are more appropriate for
00:04:24.000 individual stocks not an index so we
00:04:26.160 don't actually need them
00:04:28.170 [Music]
00:04:32.320 and then the next thing we're going to
00:04:33.440 do is set up our target so this is what
00:04:35.759 we're actually going to be predicting
00:04:37.520 using machine learning
00:04:39.680 so this target is going to be will the
00:04:42.160 price go up or down tomorrow
00:04:45.199 so some people like to predict the
00:04:47.600 absolute price so
00:04:49.520 trying to predict if the stock price
00:04:50.960 will be 17 or 18 tomorrow the big big
00:04:55.120 problem with that is your model can be
00:04:57.759 extremely accurate you can be very good
00:04:59.600 at predicting the absolute price but you
00:05:01.680 can still lose a ton of money because
00:05:04.160 ultimately if you're buying and selling
00:05:05.680 stocks you don't care about getting
00:05:08.240 accurate on the absolute price right you
00:05:10.320 care more about getting accurate on the
00:05:12.639 directionality if the price will go up
00:05:14.800 or down so you know can i buy the stock
00:05:17.600 and then will it go up
00:05:19.120 you can be really close to predicting
00:05:21.199 the the actual price and in fact be very
00:05:23.680 far behind on predicting if the stock
00:05:25.840 will go up or down
00:05:27.440 so what we're going to try to do is say
00:05:29.840 on days that the stock goes up can we
00:05:32.400 actually predict that it will go up and
00:05:34.479 that way if we want to buy the stock we
00:05:36.479 know we can buy it and the price will go
00:05:38.240 up
00:05:39.520 so our target is going to be will the
00:05:41.759 stock go up or down
00:05:43.520 so first we're going to create a column
00:05:45.680 called tomorrow
00:05:47.440 and basically what this column is going
00:05:49.280 to be is it's going to be tomorrow's
00:05:51.440 price
00:05:52.400 and we'll use the pandas shift method to
00:05:54.720 help us do this so let me run this and
00:05:57.120 then show you what actually happened
00:06:00.000 so
00:06:00.720 it we took the close column
00:06:02.720 and then we shifted all the prices back
00:06:04.639 one day so you can see for january 3rd
00:06:07.919 1950 the tomorrow column is now the
00:06:10.960 price on january 4th the closing price
00:06:14.319 so we we now have a column that shows
00:06:16.639 tomorrow's price
00:06:19.199 then based on tomorrow's price we can
00:06:21.199 now set up a target so the target is
00:06:24.000 what we're going to try to predict with
00:06:25.600 machine learning
00:06:27.039 and really all we need to do with the
00:06:28.800 target is is tomorrow's price greater
00:06:31.919 than today's price
00:06:36.560 so this will basically return a boolean
00:06:39.280 indicating if tomorrow's price is
00:06:41.120 greater than today's price but we want
00:06:43.600 to actually convert this to an integer
00:06:45.840 so we can use it in machine learning so
00:06:47.840 we're going to use the as type method
00:06:49.759 and
00:06:50.560 pass in integer
00:06:53.360 okay
00:06:54.400 has type or that's int
00:06:57.840 so now we're going to show the s p 500
00:07:00.080 data frame
00:07:01.360 and we can see we now have a target
00:07:03.360 column
00:07:04.319 that is a one when the price went up so
00:07:06.319 that's when tomorrow's price is greater
00:07:08.080 than today's price and it is a zero when
00:07:10.720 the price went down
00:07:12.160 and this is what we're going to try to
00:07:13.440 predict
00:07:15.039 the next thing we'll do is there's a lot
00:07:17.199 of historical data in this data frame
00:07:19.440 and usually a lot of historical data is
00:07:21.680 great
00:07:22.479 but with stock market data if you go
00:07:24.800 back too far
00:07:26.319 the market could have shifted
00:07:27.759 fundamentally and some of that old data
00:07:29.520 may not be as useful in making future
00:07:31.599 predictions
00:07:32.880 so what we're going to do is we're going
00:07:34.160 to remove
00:07:35.360 all data that came before 1990
00:07:41.759 so we are going to use the pandas loca
00:07:44.319 method loc
00:07:46.000 and basically say only take the rows
00:07:48.479 where the index is at least 1990 january
00:07:51.759 1st
00:07:53.440 and we can take a look and see what
00:07:54.879 happened
00:07:55.919 and you can see there are only dates
00:07:58.879 after january 1st 1990.
00:08:01.840 now i wrote dot copy here and i wrote
00:08:04.160 the dot copy because if you don't
00:08:06.479 you can sometimes get a pandas setting
00:08:08.960 with copy warning
00:08:10.639 when you try to subset a data frame and
00:08:13.280 then later assign back to it so the dot
00:08:16.000 copy helps us avoid that
00:08:18.340 [Music]
00:08:22.319 okay so we've now set up our data and we
00:08:24.720 can actually start to train our first
00:08:26.960 machine learning model so let's go ahead
00:08:29.199 and do that and for our initial model
00:08:31.759 i'm going to use something called a
00:08:33.279 random forest classifier i love to use
00:08:36.320 random forest as my default model for
00:08:38.559 most machine learning for a few reasons
00:08:40.799 so one
00:08:42.159 random forests work by training a bunch
00:08:44.640 of individual decision trees with
00:08:46.800 randomized parameters
00:08:48.640 and then averaging the results from
00:08:50.480 those decision trees so because of this
00:08:52.720 process random forests are resistant to
00:08:55.600 overfitting they can overfit but it's
00:08:58.160 harder for them to overfit than it is
00:08:59.920 for other models to overfit they also
00:09:02.320 run relatively quickly
00:09:04.160 and they can pick up non-linear
00:09:05.760 tendencies in the data so for example
00:09:08.959 the open price is not linearly
00:09:11.040 correlated with the target for example
00:09:13.200 if the open price is 4 000
00:09:15.600 versus 3000 there's no linear
00:09:17.920 relationship between the open price and
00:09:20.399 the target if the open price is higher
00:09:22.480 that doesn't mean the target will also
00:09:24.000 be higher
00:09:25.120 so
00:09:26.080 our random forests can pick up
00:09:27.920 non-linear relationships which in stock
00:09:30.560 price prediction most of the
00:09:32.720 relationships are non-linear if you can
00:09:35.120 find a linear relationship then you can
00:09:37.120 make a lot of money
00:09:40.000 so we're going to initialize our model
00:09:43.839 and we have we're going to pass in a few
00:09:45.680 parameters so n estimators is the number
00:09:48.640 of individual decision trees we want to
00:09:50.640 train the higher this is generally the
00:09:53.600 better your accuracy is up up to a limit
00:09:56.000 right you can't just get free accuracy
00:09:57.920 by making this higher and higher i'm
00:09:59.760 going to set it pretty low just so this
00:10:01.279 runs quickly for us but you might want
00:10:02.959 to try with a with a higher value
00:10:05.440 min sample split this helps us protect
00:10:08.320 against overfitting decision trees have
00:10:10.560 a tendency to overfit if they build the
00:10:13.120 tree too deeply if you don't know much
00:10:15.600 about decision trees don't worry about
00:10:17.120 it but setting min sample split helps us
00:10:19.440 protect against that overfitting the
00:10:21.680 higher we set it the less accurate the
00:10:24.399 model will be but the less it will
00:10:26.079 overfit so you may want to experiment
00:10:27.839 with this and just find the optimal
00:10:30.000 number
00:10:30.880 and then i'm going to set random state
00:10:32.800 equal to 1.
00:10:34.720 so a random forest as you may have
00:10:37.040 guessed has some randomization built in
00:10:39.920 so setting a random state means that if
00:10:42.720 we run the same model twice
00:10:45.440 the random numbers that are generated
00:10:47.600 will be in a predictable sequence each
00:10:50.000 time using this random seed of one
00:10:52.720 so if we rerun the model twice we'll get
00:10:55.200 the same results
00:10:56.720 which helps if you're updating or
00:10:58.480 improving your model and you want to
00:11:00.240 make sure it's actually the model or the
00:11:02.800 something you did that improved error
00:11:04.880 versus just just something random
00:11:07.920 okay now we're going to split our data
00:11:09.760 up into a train and test set now this is
00:11:12.800 time series data
00:11:15.200 and with time series data you can't use
00:11:18.000 cross validation or you can but if you
00:11:20.320 do then your results will look amazing
00:11:22.320 when you're training and horrible in the
00:11:24.480 real world
00:11:25.600 and the reason why is if you use cross
00:11:28.079 validation or another way to split up
00:11:30.160 your training and test set that doesn't
00:11:32.000 take the time series nature of the data
00:11:35.040 into account you will be using future
00:11:37.600 data to predict the past which you just
00:11:40.079 can't do in the real world and will
00:11:42.000 result in something called leakage where
00:11:43.920 you're leaking information into the
00:11:45.680 model so if i asked you to predict the
00:11:48.399 stock price tomorrow and i gave you what
00:11:50.560 the stock price is going to be in 30
00:11:52.240 days you would probably do better at
00:11:54.560 predicting the stock price tomorrow than
00:11:56.320 if i didn't tell you anything about the
00:11:57.920 future
00:11:59.519 so we want the model to actually learn
00:12:01.839 how to predict the stock price not just
00:12:04.160 randomly happen to have some knowledge
00:12:05.760 about the future that we're not going to
00:12:07.519 have in the real world
00:12:09.519 all right so the way we're gonna split
00:12:10.959 this data set up is we are going to put
00:12:13.760 all of the rows except the last hundred
00:12:16.320 rows into the training set and we're
00:12:18.720 gonna put the last hundred rows into the
00:12:20.639 test set
00:12:21.680 i'll show you a more sophisticated way
00:12:23.920 to actually split this up and measure
00:12:25.760 error later but for now we're just
00:12:27.600 creating a simple baseline model and
00:12:30.320 this is the easiest way to do the split
00:12:33.120 and then predictors so i'm going to
00:12:35.040 create a list with all of the columns
00:12:38.160 that we're going to use to predict the
00:12:39.760 target now i like to be really explicit
00:12:42.560 about predictors because i've been
00:12:44.480 burned before by just using all of the
00:12:47.120 columns as predictors and then creating
00:12:49.360 a model that looks amazing when i'm
00:12:51.279 training it right like 100 accuracy but
00:12:54.079 then in the real world doesn't work
00:12:56.800 what's really easy to do is accidentally
00:12:59.040 use the tomorrow column or the target
00:13:01.519 column even to predict the target
00:13:03.760 and then what's happening is your model
00:13:05.600 actually knows the future right which
00:13:07.760 isn't going to happen in the real world
00:13:10.079 all right so we're going to use close
00:13:12.399 we're going to use volume
00:13:14.240 open
00:13:15.839 high
00:13:16.959 and low so those are going to be our
00:13:18.800 predictors
00:13:20.560 and then what we're going to do is we're
00:13:21.839 going to go ahead and fit the model so
00:13:23.839 model.fit
00:13:25.200 train predictors so this is using these
00:13:27.680 predictor columns
00:13:29.360 and then we are going to try to predict
00:13:31.600 the target
00:13:33.760 so this is going to train the model
00:13:35.440 we're using the predictor columns
00:13:38.079 in order to predict the target so let's
00:13:40.560 run that and that'll take a little bit
00:13:42.720 to run
00:13:44.000 now once it's finished our next step is
00:13:46.240 actually to measure how accurate the
00:13:48.320 model is this is a really important
00:13:50.560 piece of machine learning right you need
00:13:52.959 to measure if your model is doing what
00:13:55.360 you think it is or not
00:13:57.279 so we're going to import again from
00:13:59.040 scikit-learn
00:14:00.240 we're going to import something called
00:14:01.440 precision score
00:14:03.199 and all the precision score is is it's
00:14:05.440 saying
00:14:06.560 when we said that the market would go up
00:14:09.600 when when the target was a one did it
00:14:12.079 actually go up
00:14:13.920 so what percentage of the time when we
00:14:15.680 said the market would go up did it
00:14:17.279 actually go up and this is actually a
00:14:19.680 really good error metric or accuracy
00:14:22.240 metric for this particular case because
00:14:26.079 i'm going to assume in this case that we
00:14:27.920 want to buy stock
00:14:30.160 and when we buy stock we want to hold
00:14:32.160 that stock and then sell it
00:14:34.480 and we want to make sure that when we
00:14:36.800 buy stock the stock price is actually
00:14:38.800 going to increase
00:14:40.720 so depending on what you want and what
00:14:43.040 your goals are you may want to adjust
00:14:45.360 kind of what error metric you're using
00:14:47.040 to measure performance
00:14:48.800 but in this case we're going to use
00:14:50.959 precision score
00:14:52.639 so we're going to generate predictions
00:14:54.880 using our model with the predict method
00:14:57.600 and we'll pass in our test set with the
00:14:59.839 predictors
00:15:01.040 so that's going to generate predictions
00:15:03.680 these predictions are in a numpy array
00:15:06.959 which is a little bit hard to work with
00:15:08.800 so we're actually going to turn this
00:15:10.160 into a pandas series
00:15:13.440 and we're going to use the same index as
00:15:15.279 our test data set
00:15:17.279 i have to import pandas
00:15:21.600 so we're going to import pandas and then
00:15:23.279 create this series
00:15:25.760 and we can see
00:15:27.440 predictions is now a series and it's a
00:15:29.440 little bit easier to read
00:15:31.279 and then we'll go ahead and actually
00:15:32.720 calculate the precision score
00:15:35.279 so we will calculate
00:15:37.360 the percentage and score using the
00:15:38.880 actual target
00:15:40.399 and the predicted target
00:15:42.800 and we can see this is not a very good
00:15:44.720 precision score right so when we said
00:15:47.279 the stock price would go up it only went
00:15:49.279 up 42 percent of the time that's not
00:15:51.600 great we'd be better off actually
00:15:53.120 trading against this model doing the
00:15:54.959 opposite of what it tells us to do
00:15:57.040 but that's okay we're going to make this
00:15:58.639 model better and we will be able to get
00:16:01.199 more accurate predictions
00:16:04.320 okay
00:16:05.279 so the next thing we'll do is we'll just
00:16:07.120 quickly plot our predictions and in
00:16:09.600 order to do that
00:16:10.959 we will combine our actual values with
00:16:14.079 our predicted values and we'll use the
00:16:16.240 pandas
00:16:17.600 concat
00:16:18.880 function to do that
00:16:20.959 so we're concatenating our
00:16:23.279 test target which is our actual values
00:16:25.440 and our predicted values and then we're
00:16:27.600 going to pass in axis equals one which
00:16:30.160 means treat each of these inputs as a
00:16:33.199 column in our data set now we can do is
00:16:37.199 we can plot this
00:16:40.240 and what this shows us is the orange
00:16:42.320 line
00:16:43.199 zero is our predictions and the blue
00:16:45.839 line is what actually happened so we can
00:16:48.720 see we mostly predicted that the market
00:16:51.040 would go up and uh most mostly it seems
00:16:53.839 to have gone down so
00:16:55.600 that explains why
00:16:57.199 our predictions were so far off
00:17:00.240 [Music]
00:17:04.160 all right the next thing we're going to
00:17:05.520 do is build a more robust way to test
00:17:08.799 our algorithm
00:17:10.079 so currently we're only able to test
00:17:12.880 against the last hundred days but if
00:17:15.280 you're really building a
00:17:17.119 stock price model and you want to use it
00:17:19.359 in the real world you want to be able to
00:17:21.119 test across multiple years of data right
00:17:23.760 because you want to know how your
00:17:24.880 algorithm is going to handle a lot of
00:17:27.039 different situations
00:17:28.640 that gives you more confidence that
00:17:30.080 it'll work in the future so what we're
00:17:32.559 going to do
00:17:33.600 is we're going to do something called
00:17:35.120 back testing and in order to enable back
00:17:37.679 testing the first thing we'll do is
00:17:39.840 create a prediction function
00:17:42.480 and this will basically just wrap up
00:17:44.320 everything we just did into one function
00:17:46.799 so it's the fitting of the model
00:17:49.280 using the training predictors
00:17:51.600 and the target
00:17:55.039 it's generating our predictions
00:17:57.600 which is just model
00:17:59.360 dot predict
00:18:01.360 test predictors
00:18:04.240 then it's combining our our model into a
00:18:07.360 series which i'll actually just copy and
00:18:09.120 paste
00:18:11.120 the only difference here is i gave the
00:18:12.799 series a name predictions
00:18:15.360 and then finally it's combining
00:18:17.039 everything together
00:18:19.520 same thing we did before and then at the
00:18:21.280 end we'll return our combined data frame
00:18:24.480 with the actual values and the
00:18:26.000 predictions
00:18:27.600 now we can do is write a backtest
00:18:29.520 function
00:18:30.480 which takes in our s p 500 data a
00:18:33.520 machine learning model our predictors it
00:18:36.640 also takes in a start value
00:18:38.960 which we'll set to 2500 and a step value
00:18:43.919 so what is the start value
00:18:46.240 so when you back test you want to have a
00:18:48.720 certain amount of data to train your
00:18:50.960 first model so every trading year has
00:18:54.480 about 250 days so this is saying take 10
00:18:58.160 years of data
00:18:59.679 and then train your first model with 10
00:19:01.679 years of data
00:19:03.120 and the step is 250
00:19:05.760 which means that we will be training a
00:19:07.919 model for about a year and then going to
00:19:10.160 the next year and then going into the
00:19:11.600 next year so what we're going to do is
00:19:13.840 we're going to take the first 10 years
00:19:15.440 of data and predict
00:19:17.679 values for the 11th year then we'll take
00:19:20.240 the first 11 years of data predict
00:19:22.559 values for the 12th year then we'll take
00:19:24.480 the first 12 years of data predict the
00:19:26.559 values for the 13th year and so on and
00:19:29.280 this way we'll actually get predictions
00:19:31.120 for a lot of different years
00:19:33.679 and be able to have more confidence in
00:19:35.600 our model
00:19:36.960 all right so in this backtest function
00:19:38.799 we're going to create a list called all
00:19:40.400 predictions
00:19:41.600 and uh that will be a list where of data
00:19:44.400 frames where each data frame is the
00:19:45.840 predictions for a single year
00:19:48.720 and then we are going to create a
00:19:50.640 function to loop across our data
00:19:55.679 year by year
00:19:56.960 and make predictions for all of the
00:19:59.520 years except the first 10 or so
00:20:02.640 and then we'll split up our training and
00:20:04.480 our test data
00:20:08.159 i'm going to use the dot copy to avoid
00:20:10.159 that setting with copy warning
00:20:16.320 and this code is doing exactly what i
00:20:18.240 mentioned it's creating the training set
00:20:20.080 and the test set the training set is all
00:20:22.400 of the years prior to the current year
00:20:24.799 and the test set is the current year
00:20:27.440 then we'll use our predict function to
00:20:29.440 generate our predictions
00:20:32.400 train test predictors
00:20:35.520 and model
00:20:37.679 then we're going to append to all
00:20:39.440 predictions we're going to append our uh
00:20:42.240 our predictions for the given year
00:20:45.360 and then at the end we're going to
00:20:46.640 concatenate all our predictions together
00:20:49.600 so concatenate can take a list of data
00:20:52.080 frames and combine them all into a
00:20:53.679 single data frame
00:20:55.600 so let's go ahead and run these
00:20:58.480 and then what we can do
00:21:00.000 is back test for
00:21:03.440 our s p 500 data with the model we
00:21:06.000 created earlier and with the predictors
00:21:07.840 we created earlier
00:21:09.520 and after we finish the back test we can
00:21:12.559 actually start evaluating the error of
00:21:15.280 our predictions
00:21:16.720 so first let's take a look at
00:21:18.240 predictions
00:21:20.000 and see how many days we predicted the
00:21:22.720 market would go up versus down
00:21:25.280 so value counts will just count up how
00:21:27.280 many times each type of prediction was
00:21:29.679 made
00:21:30.880 so we can see we predicted that the
00:21:32.880 market would go down on about 3000 days
00:21:35.440 we predicted the market would go up on
00:21:37.200 about 2 000 days
00:21:40.000 and now we can actually look at our
00:21:41.760 precision score
00:21:45.520 and we can take the target and we can
00:21:48.480 take the
00:21:49.600 predictions
00:21:53.280 and this will give us our precision
00:21:55.120 score
00:21:56.320 okay so across all of these rows these
00:21:59.360 about 6 000 or so trading days we were
00:22:02.720 about 53 accurate precise so when we
00:22:05.760 said the market would go up it went up
00:22:08.159 53 of the time
00:22:10.880 now is that good or not
00:22:12.559 so as a benchmark what we can look at is
00:22:15.200 the percentage of days where the market
00:22:17.600 actually went up
00:22:19.280 and to do that we can look at the value
00:22:21.120 counts of the target
00:22:22.960 divided by
00:22:24.720 the number of rows
00:22:26.559 total and this will give us percentages
00:22:29.360 so the s p 500 in the days we were
00:22:32.320 looking at actually went up 53.6 percent
00:22:35.679 of days and went down 46.3 percent of
00:22:38.320 days so if we all we had done was just
00:22:41.440 wake up every day and say i'm gonna buy
00:22:43.919 and sell at the end of the day we would
00:22:46.000 actually have been better off than using
00:22:47.840 this algorithm this algorithm performed
00:22:50.000 a little bit worse than just the natural
00:22:52.400 percentage of days that the stock market
00:22:54.799 went up
00:22:56.080 but that's okay now that we have back
00:22:57.919 testing we actually have a lot of
00:23:00.640 confidence in our model and our ability
00:23:03.200 to test it
00:23:08.480 so the next thing we'll do is add some
00:23:10.320 more predictors to our model and see if
00:23:12.880 that improves our accuracy
00:23:15.200 all right so what we're going to do is
00:23:17.440 we're going to create a variety of
00:23:19.280 rolling averages
00:23:21.360 so if if you're just a human analyst
00:23:24.880 trying to predict if a stock will go up
00:23:26.720 tomorrow some of the numbers you might
00:23:28.720 look at are is the stock price today
00:23:31.200 higher than it was last week higher than
00:23:33.360 it was three months ago a year ago
00:23:36.400 five years ago and you might use all of
00:23:38.880 those inputs to help you determine if
00:23:41.520 the stock if the stock will go up or
00:23:43.279 down
00:23:44.159 and we're going to give the algorithm
00:23:45.919 that information so what these horizons
00:23:48.720 are are horizons on which we want to
00:23:50.720 look at rolling means
00:23:53.600 so we'll calculate the mean close price
00:23:56.640 in the last two days the last trading
00:23:59.120 week which is five days the last
00:24:01.919 three months or so which is 60 trading
00:24:04.400 days the last year and the last four
00:24:06.640 years and then we'll find the ratio
00:24:08.960 between today's closing price and the
00:24:11.279 closing price in those periods which
00:24:13.360 will help us know hey is the market gone
00:24:15.360 up a ton because if so it may be due for
00:24:18.159 a downturn has the market gone down a
00:24:20.240 ton if so it may be due for an upswing
00:24:22.960 so we're just going to give the
00:24:24.000 algorithm some more information to help
00:24:26.400 it make better predictions and then
00:24:28.400 we're going to create a list called new
00:24:30.840 predictors which will hold some of the
00:24:32.960 new columns that we're going to create
00:24:35.279 okay
00:24:36.080 so we're going to loop through these
00:24:37.679 horizons
00:24:39.840 and then we're going to calculate a
00:24:41.600 rolling average
00:24:47.039 against that horizon
00:24:49.600 and
00:24:50.640 we'll take the mean
00:24:52.000 and then what we can do is actually
00:24:53.600 create a couple of columns so one will
00:24:56.000 be called ratio column
00:24:58.320 and that'll we'll name that column close
00:25:00.720 ratio
00:25:02.559 horizon so close ratio 2 close ratio 5
00:25:05.840 etc
00:25:07.279 and then we'll add it to our s p 500
00:25:10.080 data set
00:25:12.240 data frame
00:25:13.600 so all this is going to be is the close
00:25:15.919 price
00:25:17.760 in the s p 500
00:25:20.960 divided by our rolling average
00:25:26.480 so the first time through the loop this
00:25:28.159 is going to be the ratio between today's
00:25:30.080 close and the average close in the last
00:25:32.320 two days second time through the loop
00:25:34.400 it'll be the ratio between today's close
00:25:36.720 the average close in the last five days
00:25:38.799 and and so on
00:25:40.720 we can also look at a trend
00:25:42.720 and a trend is just going to be the
00:25:44.080 number of days
00:25:45.760 in the past x days whatever the horizon
00:25:48.480 is
00:25:49.200 that the stock price actually went up
00:25:53.520 and what we can do here is say trend
00:25:55.760 column
00:25:58.000 equals
00:25:59.039 so what we'll do is we'll use shift
00:26:00.720 again
00:26:01.679 but we'll shift forward this time
00:26:04.240 and then what we'll do is we'll find the
00:26:06.960 rolling
00:26:08.840 sum
00:26:10.480 okay
00:26:11.360 of the target
00:26:14.000 so what is this doing let's scroll up
00:26:16.240 and find the s p 500 data frame
00:26:19.120 so what this is going to do
00:26:20.960 is it is going to
00:26:22.640 on on any given day
00:26:24.720 it is going to look at the past few days
00:26:27.360 and see the average the sum of the
00:26:29.919 target
00:26:31.039 so if we're on uh january 8th 1990 it's
00:26:34.640 gonna look at the last
00:26:36.320 four five days and find the sum of the
00:26:40.080 target there are only four days
00:26:41.919 available so in reality we wouldn't be
00:26:44.080 able to compute a rolling sum but let's
00:26:45.760 assume there's a fifth day here and it
00:26:47.840 is able to and it would basically take
00:26:49.760 the sum so the sum of the number of days
00:26:51.679 that the stock price actually went up
00:26:55.520 okay and then we're going to add these
00:26:57.120 to new predictors
00:27:00.559 ratio column
00:27:02.799 trend column
00:27:06.080 so let's go ahead and run that
00:27:08.640 and we should now have some extra
00:27:10.400 columns in our s p 500 data set
00:27:13.440 and you can see there's a lot of nans so
00:27:16.000 so what's the deal with that
00:27:18.240 so when pandas cannot find enough days
00:27:21.840 or enough rows prior to the current row
00:27:24.320 to actually compute a rolling average
00:27:26.480 it'll just return nam
00:27:28.320 so this is the close ratio two which is
00:27:30.720 based on the rolling average of the two
00:27:32.799 days prior to and including the current
00:27:35.440 day
00:27:36.240 so on january 2nd 1990
00:27:39.120 there are no days before this so it
00:27:41.120 can't actually compute a rolling sum so
00:27:43.279 it returns a rolling average so it
00:27:45.039 returns nan
00:27:46.799 on january 3rd 1990 it can right it
00:27:50.159 takes the average of
00:27:51.919 this day and the previous day
00:27:54.399 and same thing with all of these columns
00:27:57.520 it's a little bit different for trend
00:27:59.120 because you can't include the current
00:28:00.880 day so here it's looking for two
00:28:03.440 previous days it doesn't include the
00:28:05.360 current day because if it did you'd be
00:28:07.679 including today's target in that column
00:28:10.640 which will give you leakage and make
00:28:13.039 your algorithm look amazing
00:28:15.120 but it's not going to work in the real
00:28:16.480 world
00:28:17.919 so we're going to get rid of some of
00:28:19.360 these extra columns using drop n a
00:28:23.919 extra rows sorry with the missing rows
00:28:27.279 all right so we now see our data starts
00:28:29.600 in 1993 that's because of these trend
00:28:33.039 1000 and close ratio 1000 columns
00:28:36.640 so we needed about four years of data to
00:28:38.720 actually compute those
00:28:41.279 all right so let's see how these
00:28:43.120 performed
00:28:44.440 [Music]
00:28:48.399 so let's let's update our model slightly
00:28:51.039 and change some of our parameters
00:28:53.360 so we'll increase our number of
00:28:54.880 estimators to 200
00:28:57.200 and we will reduce our min sample split
00:29:02.159 to 50
00:29:04.640 and we'll keep our random state
00:29:06.960 so let's go ahead and run that
00:29:09.200 and then we'll rewrite our predict
00:29:11.039 function slightly so let me go up and
00:29:12.960 copy and paste this
00:29:17.200 so here when you just run dot predict
00:29:20.559 basically the model returns 0 or 1. what
00:29:24.559 we actually want is a little bit more
00:29:26.240 control over how we define what becomes
00:29:29.360 a one and what becomes a zero so we're
00:29:32.080 going to use the predict
00:29:33.840 proba method
00:29:35.440 and what this will return is actually a
00:29:37.760 probability
00:29:39.360 that the row
00:29:40.720 will be a zero or a one so to return the
00:29:43.120 probability that the stock price will go
00:29:45.039 down tomorrow and the probability of the
00:29:47.279 stock price will go up tomorrow
00:29:49.679 so what we can do is just get the second
00:29:52.640 column of this which will be the
00:29:55.039 probability the stock price goes up
00:29:57.760 and then what we want to do is set our
00:29:59.600 custom threshold so by default the
00:30:02.320 threshold is 0.5
00:30:04.399 so if there's greater than a 50 chance
00:30:06.559 that the price will go up the model will
00:30:09.120 return that the price will go up but
00:30:11.520 we're actually going to set that
00:30:12.559 threshold to 60
00:30:14.960 so
00:30:15.679 this means that the model has to be more
00:30:17.600 confident the price will go up in order
00:30:20.320 to actually
00:30:22.240 show that the price will go up and what
00:30:24.240 this will do is reduce our total number
00:30:26.399 of trading days so it'll reduce the
00:30:28.720 number of days that it predicts the
00:30:30.159 price will go up but it will increase
00:30:32.480 the chance that the price will actually
00:30:34.159 go up on those days
00:30:35.760 which fits really well with what we want
00:30:37.600 right we don't want to make a ton of
00:30:39.120 trades we want to know that when we make
00:30:41.440 a trade the price will actually go up
00:30:43.840 but we don't want to trade every single
00:30:45.279 day that's a way to lose money pretty
00:30:46.960 quickly
00:30:48.320 and the rest of this function should be
00:30:49.919 the same
00:30:51.600 so let's run that
00:30:53.039 and then let's go ahead and run our back
00:30:54.960 test again
00:30:59.840 and this time we'll pass in our new
00:31:01.600 predictors
00:31:02.720 you may notice that we're actually
00:31:04.000 getting rid of using the close open high
00:31:06.880 low and volume columns and the reason
00:31:09.200 for that is those are just absolute
00:31:11.039 numbers right
00:31:12.399 so it isn't super informative to the
00:31:14.720 model if the price today is 465 dollars
00:31:18.640 it doesn't tell me anything about
00:31:19.840 whether the price will go up or down
00:31:21.360 tomorrow
00:31:22.399 the ratios are actually the most
00:31:24.000 informative part what is the price today
00:31:26.240 compared to the price yesterday compared
00:31:28.240 to the price last week so that's why we
00:31:30.399 actually took those columns out
00:31:32.559 all right so once the back test is done
00:31:34.799 what we can do is we can take a look at
00:31:39.039 the value counts again for the
00:31:40.799 predictions
00:31:44.960 so you'll remember last time there were
00:31:47.519 about 3 000 days where it predicted the
00:31:50.320 price would go down and about 2 000 days
00:31:52.720 it predicted the price would go up
00:31:54.880 so that was the value counts from last
00:31:56.559 time
00:31:57.360 the distribution is very different now
00:31:59.600 you can see that there's only a few days
00:32:01.840 that we've predicted the price would go
00:32:03.360 up and that's because we changed this
00:32:05.519 threshold right we asked the model to be
00:32:08.960 more confident in its predictions before
00:32:11.760 it actually predicted that the price
00:32:13.120 would go up and what this means is that
00:32:15.360 we're actually going to be trading we're
00:32:17.120 going to be buying stock on fewer days
00:32:20.000 but hopefully and we're about to find
00:32:21.760 out hopefully we will be more accurate
00:32:24.320 on those on those days
00:32:26.559 so we will check the precision score
00:32:30.320 and we'll look at our target and then
00:32:32.080 we'll look at our predictions
00:32:38.000 so let's run that and we can see when we
00:32:40.720 buy a stock so when the model predicts
00:32:43.120 that the price will go up 57 percent of
00:32:45.760 the time it will actually go up so this
00:32:48.159 may not seem great right 57 is a failing
00:32:51.360 grade in most places but it's actually
00:32:53.440 pretty good especially given that we're
00:32:55.360 just looking at time series data and
00:32:57.440 we're just looking at historical prices
00:32:59.840 of the index
00:33:01.279 this would this would actually make you
00:33:02.960 money if you had traded off it from 1993
00:33:06.480 to the present now would i recommend
00:33:08.720 using this model to go make trades no
00:33:11.519 there are things you can add to it to
00:33:13.120 make it more accurate though that i'll
00:33:14.480 talk about but this is actually a pretty
00:33:16.480 good result given the data that we had
00:33:18.559 to work with
00:33:19.679 and it's better than our baseline right
00:33:21.679 so
00:33:22.880 the stock went up about 53 percent of
00:33:25.279 the days but our model is actually
00:33:29.279 on days it says to buy the price
00:33:31.360 actually goes up 57 percent of the time
00:33:33.440 so the model actually has some
00:33:34.960 predictive value
00:33:36.840 [Music]
00:33:40.960 okay so let me summarize and then talk
00:33:43.600 about things you could do to extend this
00:33:45.360 model
00:33:46.320 so we did a lot right we downloaded some
00:33:49.760 stock data
00:33:51.519 for the s p 500 index we cleaned and
00:33:54.480 visualized the data
00:33:56.880 we set up our machine learning target
00:33:59.440 we trained our initial model
00:34:02.159 we then evaluated error and created a
00:34:05.200 way to back test and really accurately
00:34:07.840 measure that error over p over long
00:34:09.918 periods of time
00:34:11.599 then we improved our model with some
00:34:13.440 extra predictor columns
00:34:16.480 so if you want to continue extending
00:34:18.159 this model some things i would recommend
00:34:20.159 thinking about
00:34:21.440 so there are exchanges that are open
00:34:23.918 overnight
00:34:25.679 so the s p 500 only trades during u.s
00:34:29.199 market hours but there are other indices
00:34:31.359 around the world that open before the
00:34:33.679 u.s markets open so it might be worth
00:34:36.399 looking at those prices and seeing if
00:34:38.239 you can actually correlate them right if
00:34:40.480 if an index on the other side of the
00:34:42.000 world is increasing does that help
00:34:44.480 predict the s p 500 bet
00:34:47.040 you can add in news so that includes
00:34:50.000 articles that are coming out general
00:34:52.159 macroeconomic conditions like interest
00:34:54.239 rates inflation etc
00:34:56.480 you can also think about adding in some
00:34:59.119 key components of the s p 500 like key
00:35:01.920 stocks and key sectors it's possible
00:35:04.160 that for example if tech is in a
00:35:06.320 downturn it's possible that six months
00:35:08.640 later the s p 500 will go down maybe it
00:35:11.040 doesn't go down immediately
00:35:12.960 so that's another thing you can try you
00:35:15.040 can also try increasing the resolution
00:35:17.680 right we're looking at daily data here
00:35:19.760 but you could try looking at hourly data
00:35:22.960 minute by minute data tick data even if
00:35:25.440 you can get it not not always the
00:35:27.280 easiest or cheapest to get but if you
00:35:29.280 can get that data you can make more
00:35:30.880 accurate predictions so those are just
00:35:33.040 some ideas on where you can take this
00:35:35.280 but as i know from personal experience
00:35:37.680 you can build quite a bit on this model
00:35:39.920 and get pretty far if you if you want to
00:35:42.720 all right so i hope you enjoyed this
00:35:44.720 overview of how to build a machine
00:35:46.960 learning model to predict the s p 500
00:35:50.980 [Music]
